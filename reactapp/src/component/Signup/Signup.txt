import React, { Component } from "react";
import Form from "react-validation/build/form";
import Input from "react-validation/build/input";
import CheckButton from "react-validation/build/button";
import { isEmail } from "validator";

import { connect } from "react-redux";
import { register } from "../actions/auth";

const required = (value) => {
    if (!value) {
        return (
            <div className="alert alert-danger" role="alert">
                This field is required!
            </div>
        );
    }
};

const email = (value) => {
    if (!isEmail(value)) {
        return (
            <div className="alert alert-danger" role="alert">
                This is not a valid email.
            </div>
        );
    }
};

const vusername = (value) => {
    if (!isEmail(value)) {
        return (
            <div className="alert alert-danger" role="alert">
                Please enter username same as email.
            </div>
        );
    }
};

const vpassword = (value) => {
    if (value.length < 4 || value.length > 40) {
        return (
            <div className="alert alert-danger" role="alert">
                The password must be between 4 and 40 characters.
            </div>
        );
    }
};

const vmobileNumber = (value) => {
    if (value.length < 10) {
        return (
            <div className="alert alert-danger" role="alert">
                Mobile Number must be 10 characters.
            </div>
        );
    }
}

const vconfirmpassword = (value) => {
    if(!value){
        return (
            <div className="alert alert-danger" role="alert">
                Please enter Confirm Password.
            </div>
        );
    }else if (vpassword && value !== vpassword){
        return (
            <div className="alert alert-danger" role="alert">
                Password and Confirm Password does not match.
            </div>
        );
    }
}

class Register extends Component {
    constructor(props) {
        super(props);
        this.handleRegister = this.handleRegister.bind(this);
        this.onChangeUsername = this.onChangeUsername.bind(this);
        this.onChangeEmail = this.onChangeEmail.bind(this);
        this.onChangePassword = this.onChangePassword.bind(this);
        this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);
        this.onChangeMobileNumber = this.onChangeMobileNumber.bind(this);

        this.state = {
            email: "",
            username: "",
            mobileNumber: "",
            password: "",
            confirmpassword: "",
            successful: false,
        };
  }

  onChangeUsername(e) {
        this.setState({
            username: e.target.value,
        });
  }

  onChangeEmail(e) {
        this.setState({
            email: e.target.value,
        });
  }

  onChangePassword(e) {
        this.setState({
            password: e.target.value,
        });
  }

  onChangeMobileNumber(e) {
        this.setState({
            mobileNumber: e.target.mobileNumber,
        });
  }

  onChangeConfirmPassword(e) {
      this.setState({
            confirmpassword: e.target.confirmpassword,
      });
  }

  handleRegister(e) {
        e.preventDefault();

        this.setState({
            successful: false,
        });

        this.form.validateAll();

        if (this.checkBtn.context._errors.length === 0) {
            this.props
                .dispatch(
                    register( this.state.email, this.state.username, this.state.mobileNumber, this.state.password)
                )
                .then(() => {
                    this.setState({
                        successful: true,
                    });
                })
                .catch(() => {
                    this.setState({
                        successful: false,
                    });
                });
        }
  }

  render() {
        const { message } = this.props;

        return (
        <div className="col-md-12">
            <div className="card card-container">
            <img
                src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
                alt="profile-img"
                className="profile-img-card"
            />

            <Form
                onSubmit={this.handleRegister}
                ref={(c) => {
                    this.form = c;
                }}
            >
                {!this.state.successful && (

                <div>
                    <div className="form-group">
                    <label htmlFor="userRole">User Role</label>
                    <Input
                        type="text"
                        className="form-control"
                        name="userRole"
                    />
                    </div>

                    <div className="form-group">
                    <label htmlFor="email">Email</label>
                    <Input
                        type="email"
                        className="form-control"
                        name="email"
                        value={this.state.email}
                        onChange={this.onChangeEmail}
                        validations={[required, email]}
                    />
                    </div>

                    <div className="form-group">
                    <label htmlFor="username">Username</label>
                    <Input
                        type="text"
                        className="form-control"
                        name="username"
                        value={this.state.username}
                        onChange={this.onChangeUsername}
                        validations={[required, vusername]}
                    />
                    </div>

                    <div className="form-group">
                    <label htmlFor="mobileNumber">Mobile Number</label>
                    <Input
                        type="text"
                        className="form-control"
                        name="mobileNumber"
                        value={this.state.mobileNumber}
                        onChange={this.onChangeMobileNumber}
                        validations={[required, vmobileNumber]}
                    />
                    </div>

                    <div className="form-group">
                    <label htmlFor="password">Password</label>
                    <Input
                        type="password"
                        className="form-control"
                        name="password"
                        value={this.state.password}
                        onChange={this.onChangePassword}
                        validations={[required, vpassword]}
                    />
                    </div>

                    <div className="form-group">
                    <label htmlFor="confirmpassword">Confirm Password</label>
                    <Input
                        type="password"
                        className="form-control"
                        name="confirmpassword"
                        value={this.state.password}
                        onChange={this.onChangeConfirmPassword}
                        validations={[required, vconfirmpassword]}
                    />
                    </div>

                    <div className="form-group">
                    <button className="btn btn-primary btn-block">Sign Up</button>
                    </div>
                </div>
                )}

                {message && (
                <div className="form-group">
                    <div className={ this.state.successful ? "alert alert-success" : "alert alert-danger" } role="alert">
                        {message}
                    </div>
                </div>
                )}
                <CheckButton
                    style={{ display: "none" }}
                    ref={(c) => {
                        this.checkBtn = c;
                    }}
                />
            </Form>
            </div>
        </div>
        );
    }
}

function mapStateToProps(state) {
    const { message } = state.message;
    return {
        message,
    };
}

export default connect(mapStateToProps)(Register);